{"version":3,"sources":["components/Todo.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","index","todo","completeTodo","removeTodo","Card","style","textDecoration","isComplete","className","Typography","task","IconButton","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","TextField","id","label","variant","type","fullWidth","onChange","target","App","todos","setTodos","newTodos","splice","color","gutterBottom","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTA2BeA,MAnBf,YAA0D,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,eAAgBL,EAAKM,WAAa,eAAiB,IAC5DC,UAAU,QAEV,kBAACC,EAAA,EAAD,KAAaR,EAAKS,MAClB,6BACE,kBAACC,EAAA,EAAD,CAAYC,QAAS,kBAAMV,EAAaF,KACtC,kBAAC,IAAD,OAEF,kBAACW,EAAA,EAAD,CAAYC,QAAS,kBAAMT,EAAWH,KACpC,kBAAC,IAAD,U,QCUKa,MA1Bf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAU7B,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKP,kBAACI,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,mBACNC,QAAQ,WACRhB,UAAU,QACViB,KAAK,OACLC,UAAU,OACVV,MAAOA,EACPW,SAAU,SAACR,GAAD,OAAOF,EAASE,EAAES,OAAOZ,Y,MCyC5Ba,MA1Df,WAAe,MAEad,mBAAS,CACjC,CACEL,KAAM,8BACNH,YAAY,GAEd,CACEG,KAAM,sCACNH,YAAY,GAEd,CACEG,KAAM,6BACNH,YAAY,KAbH,mBAENuB,EAFM,KAECC,EAFD,KAwBP7B,EAAe,SAACF,GACpB,IAAMgC,EAAQ,YAAOF,GACrBE,EAAShC,GAAOO,YAAa,EAC7BwB,EAASC,IAIL7B,EAAa,SAACH,GAClB,IAAMgC,EAAQ,YAAOF,GACrBE,EAASC,OAAOjC,EAAO,GACvB+B,EAASC,IAGX,OACE,yBAAKxB,UAAU,OACb,kBAACC,EAAA,EAAD,CAAYyB,MAAM,UAAUV,QAAQ,KAAKW,cAAY,GAArD,oBAGA,yBAAK3B,UAAU,aACZsB,EAAMM,KAAI,SAACnC,EAAMD,GAAP,OACT,kBAAC,EAAD,CACEqC,IAAKrC,EACLA,MAAOA,EACPC,KAAMA,EACNC,aAAcA,EACdC,WAAYA,OAGhB,kBAAC,EAAD,CAAUW,QAlCA,SAACJ,GACf,IAAMsB,EAAQ,sBAAOF,GAAP,CAAc,CAAEpB,UAC9BqB,EAASC,SCfOM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9b75c65.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Typography from \"@material-ui/core/Typography\";\n\n//Functional component for todos\nfunction Todo({ index, todo, completeTodo, removeTodo }) {\n  return (\n    <Card\n      style={{ textDecoration: todo.isComplete ? \"Line-through\" : \"\" }}\n      className=\"todo\"\n    >\n      <Typography>{todo.task}</Typography>\n      <div>\n        <IconButton onClick={() => completeTodo(index)}>\n          <CheckIcon />\n        </IconButton>\n        <IconButton onClick={() => removeTodo(index)}>\n          <DeleteForeverIcon />\n        </IconButton>\n      </div>\n    </Card>\n  );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\n//Functional component that provides the TodoForm for user input\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Add Todo + Enter\"\n        variant=\"outlined\"\n        className=\"input\"\n        type=\"text\"\n        fullWidth=\"true\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport TodoForm from \"./components/TodoForm\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./App.css\";\n\n//This is the main application. State is set using the useState() Hook\nfunction App() {\n  //Application state for all todos\n  const [todos, setTodos] = useState([\n    {\n      task: \"Learn the 'useState()' Hook\",\n      isComplete: false,\n    },\n    {\n      task: \"Build a Todo App Using 'useState()'\",\n      isComplete: false,\n    },\n    {\n      task: \"Upload This Repo to Github\",\n      isComplete: false,\n    },\n  ]);\n\n  //Function to add todos\n  const addTodo = (task) => {\n    const newTodos = [...todos, { task }];\n    setTodos(newTodos);\n  };\n\n  //Function to show completed todo\n  const completeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].isComplete = true;\n    setTodos(newTodos);\n  };\n\n  //Function to remove a todo from the list, and the state\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <Typography color=\"Inherit\" variant=\"h2\" gutterBottom>\n        Josh's Todo List\n      </Typography>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}